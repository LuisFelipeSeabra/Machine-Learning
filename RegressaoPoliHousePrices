# -*- coding: utf-8 -*-
"""
Created on Fri Dec  6 01:18:46 2019

1. Apagando colunas com mais de 600 registros com valores nulos
2. tratamento de valores nulos:
    -> MasVnrType: apagando valores nulos - MasVnrArea é apagado tb...
    -> GarageType/GarageYrBlt/GarageFinish/GarageCars/GarageArea/GarageQual/GarageCond
        GarageYrBlt -> Valor nulo por 0
    ->BsmtQual,BsmtCond,BsmtFinType1,BsmtExposure,BsmtFinType2
        BsmtExposure,BsmtFinType1 -> alterando valor vazio por 'noo'
    -> LotFrontage
    
mae (degree: 3)= 45124.50774765253
mae (degree: 1)= 24812.349205441504

"""

import pandas as pd
base = pd.read_csv('trainHousePrices.csv')

basecop = base

###################### gráficos ######################
corr = basecop.corr()

###################### Valores Nulos ######################
listanulos = []
nulos = []
#nulos = base.isnull().sum()
for i in range(base.columns.size):
    nulo = base[base.columns[i]].isnull().sum()
    listanulos2 = []
    listanulos2.append(base[base.columns[i]].isnull().sum())
    listanulos2.append(base.columns[i])
    if nulo > 600:
        listanulos.append(listanulos2)
        nulos.append(base.columns[i])
        
#dropna() -> Apaga linhas que contenham pelo menos um NaN 
        
###Apagando as colunas  que contenham valores nulos de acordo com a lista "nulo"        
i = 0
for j in range(len(listanulos)):
    basecop = basecop.drop(nulos[j], axis =1)
           
# verificando se há algum valor nulo:        
nulos = basecop.isnull().sum()

#MasVnrType Apagando linhas nulas
basecop = basecop.dropna(subset=['MasVnrType'])

#Electrical Substitui valor nulo pelo maior 

basecop['Electrical'].describe()
top  = basecop['Electrical'].describe()
basecop['Electrical'].fillna(top[2],inplace=True )


# verificando se há algum valor nulo: 
nulos = basecop.isnull().sum()

#GarageType/GarageYrBlt/GarageFinish/GarageCars/GarageArea/GarageQual/GarageCond alterando para 'none'
listaGarage = ['GarageType','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond']

i = 0
for i in listaGarage:
    basecop[i].fillna('none',inplace=True )

basecop['GarageYrBlt'].fillna(0,inplace=True )

# verificando se há algum valor nulo: 
nulos = basecop.isnull().sum()

#BsmtQual,BsmtCond,BsmtFinType1,BsmtExposure,BsmtFinType2
listaBstm = ['BsmtQual','BsmtCond','BsmtFinType1','BsmtExposure','BsmtFinType2']

i = 0
for i in listaBstm:
    basecop[i].fillna('noo',inplace=True )

# verificando se há algum valor nulo: 
nulos = basecop.isnull().sum()

#LotFrontage
#1.apagar linhas nulas 
basecop = basecop.dropna(subset=['LotFrontage'])

#2. substituir pelo que mais aparece 

#2. substituir pelo que menos aparece

# verificando se há algum valor nulo: 
nulos = basecop.isnull().sum()


#_____________________________________ETAPA2___________________________________

#divisão da base em previsores e classe
x = basecop.iloc[:,0:75].values
y = basecop.iloc[:,75].values


#trasformação de variáveis categóricas em dados numéricos para previsores
from sklearn.preprocessing import LabelEncoder
labelencoder_x = LabelEncoder()


for i in range(len(x[1])):
    print(i)
    x[:,i] = labelencoder_x.fit_transform(x[:,i])
    
#print(x[0:2,0:73])

from sklearn.model_selection import train_test_split
x_treinamento, x_teste, y_treinamento, y_teste = train_test_split(x,y,test_size = 0.3, random_state = 0 )


from sklearn.preprocessing import PolynomialFeatures
poly = PolynomialFeatures(degree = 1)
# fit encaixa os dados; adaptar os dados
x_treinamento_poly = poly.fit_transform(x_treinamento)
x_teste_poly = poly.transform(x_teste)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_treinamento_poly, y_treinamento)
score = regressor.score(x_treinamento_poly, y_treinamento)

previsoes = regressor.predict(x_teste_poly)

from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_teste,previsoes)



